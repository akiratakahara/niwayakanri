version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: niwayakanri_postgres
    environment:
      POSTGRES_DB: niwayakanri
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - niwayakanri_network

  # Redis (for caching and job queues)
  redis:
    image: redis:7-alpine
    container_name: niwayakanri_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - niwayakanri_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: niwayakanri_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/niwayakanri
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - niwayakanri_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: niwayakanri_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - niwayakanri_network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  niwayakanri_network:
    driver: bridge

